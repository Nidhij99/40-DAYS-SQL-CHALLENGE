CREATE database spotify;
use spotify;

CREATE TABLE users (
    USER_ID INT PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_STATUS VARCHAR(20) NOT NULL
);

CREATE TABLE logins (
    USER_ID INT,
    LOGIN_TIMESTAMP DATETIME NOT NULL,
    SESSION_ID INT PRIMARY KEY,
    SESSION_SCORE INT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- Users Table
INSERT INTO USERS VALUES (1, 'Alice', 'Active');
INSERT INTO USERS VALUES (2, 'Bob', 'Inactive');
INSERT INTO USERS VALUES (3, 'Charlie', 'Active');
INSERT INTO USERS  VALUES (4, 'David', 'Active');
INSERT INTO USERS  VALUES (5, 'Eve', 'Inactive');
INSERT INTO USERS  VALUES (6, 'Frank', 'Active');
INSERT INTO USERS  VALUES (7, 'Grace', 'Inactive');
INSERT INTO USERS  VALUES (8, 'Heidi', 'Active');
INSERT INTO USERS VALUES (9, 'Ivan', 'Inactive');
INSERT INTO USERS VALUES (10, 'Judy', 'Active');

-- Logins Table 

INSERT INTO LOGINS  VALUES (1, '2023-07-15 09:30:00', 1001, 85);
INSERT INTO LOGINS VALUES (2, '2023-07-22 10:00:00', 1002, 90);
INSERT INTO LOGINS VALUES (3, '2023-08-10 11:15:00', 1003, 75);
INSERT INTO LOGINS VALUES (4, '2023-08-20 14:00:00', 1004, 88);
INSERT INTO LOGINS  VALUES (5, '2023-09-05 16:45:00', 1005, 82);
INSERT INTO LOGINS  VALUES (6, '2023-10-12 08:30:00', 1006, 77);
INSERT INTO LOGINS  VALUES (7, '2023-11-18 09:00:00', 1007, 81);
INSERT INTO LOGINS VALUES (8, '2023-12-01 10:30:00', 1008, 84);
INSERT INTO LOGINS  VALUES (9, '2023-12-15 13:15:00', 1009, 79);
INSERT INTO LOGINS  VALUES (1, '2024-01-10 07:45:00', 1011, 86);
INSERT INTO LOGINS  VALUES (2, '2024-01-25 09:30:00', 1012, 89);
INSERT INTO LOGINS  VALUES (3, '2024-02-05 11:00:00', 1013, 78);
INSERT INTO LOGINS  VALUES (4, '2024-03-01 14:30:00', 1014, 91);
INSERT INTO LOGINS  VALUES (5, '2024-03-15 16:00:00', 1015, 83);
INSERT INTO LOGINS VALUES (6, '2024-04-12 08:00:00', 1016, 80);
INSERT INTO LOGINS VALUES (7, '2024-05-18 09:15:00', 1017, 82);
INSERT INTO LOGINS VALUES (8, '2024-05-28 10:45:00', 1018, 87);
INSERT INTO LOGINS VALUES (9, '2024-06-15 13:30:00', 1019, 76);
INSERT INTO LOGINS VALUES (10, '2024-06-25 15:00:00', 1010, 92);
INSERT INTO LOGINS  VALUES (10, '2024-06-26 15:45:00', 1020, 93);
INSERT INTO LOGINS VALUES (10, '2024-06-27 15:00:00', 1021, 92);
INSERT INTO LOGINS  VALUES (10, '2024-06-28 15:45:00', 1022, 93);
INSERT INTO LOGINS  VALUES (1, '2024-01-10 07:45:00', 1101, 86);
INSERT INTO LOGINS  VALUES (3, '2024-01-25 09:30:00', 1102, 89);
INSERT INTO LOGINS  VALUES (5, '2024-01-15 11:00:00', 1103, 78);
INSERT INTO LOGINS  VALUES (2, '2023-11-10 07:45:00', 1201, 82);
INSERT INTO LOGINS  VALUES (4, '2023-11-25 09:30:00', 1202, 84);
INSERT INTO LOGINS  VALUES (6, '2023-11-15 11:00:00', 1203, 80);

select * from logins;

-- Q1. Management wants to see all the users who have not logged in last 5 months.

select user_id , max(login_timestamp) from logins
group by user_id
having max(login_timestamp) < date_sub('2024-06-28', interval 5 month);

-- or 
select* from logins;
select distinct user_id from logins 
where user_id not in ( select user_id from logins where login_timestamp > date_sub('2024-06-28', interval 5 month));

-- Q2. For the business unit quartely analysis , calculate how many users and how many sessions were at each quarter !
-- return first_day_of_quarter, session_count, user_count.

select count(session_id) as session_count, count(distinct user_id) as total_users, DATE_FORMAT(min(login_timestamp) ,'%Y-%m-01') as first_day_of_quarter
from logins 
group by quarter(login_timestamp);

-- Q3. Display user_id that log in in january 2024 and did not log in in november 2023. Return user_id 

select Distinct user_id from logins 
where login_timestamp between '2024-01-01' and '2024-01-31' and user_id not in (select user_id from logins 
where login_timestamp between '2023-11-01' and '2023-11-30');

-- Q4. Adding to the query of question 2 , find percentage change in session from last quarter.
-- Return - first day of quarter, session_count, session_count_prev , session_percent_change.

with cte as (
select date_format(min(login_timestamp),'%y-%m-01') as first_dayof_quarter, count(session_id) as session_count, count(user_id) as total_users
from logins
group by quarter(login_timestamp)) 
select * , lag(session_count) over(order by first_dayof_quarter) as previous_session_count,
abs((session_count- lag(session_count) over(order by first_dayof_quarter))*100 / lag(session_count) over(order by first_dayof_quarter))
from cte;

-- Q5. Display the users that have the highest session score(max) for each day. Return Date , username and score !!

with cte as 
(SELECT USER_id, sum(session_score) as highest_score, date(login_timestamp) as login_date , row_number() over(partition by date(login_timestamp)  order by sum(session_score)) as rn
from logins
group by user_id, date(login_timestamp)
order by user_id, date(login_timestamp)) 
select* from CTE
where rn=1;  

-- Q6. To identify the best users - Return the users that had the session on every single day since their first login. Return User_id! 

SELECT distinct user_id, date(min(login_timestamp)) as first_day_login , abs(datediff('2024-06-28',date(min(login_timestamp)))+1) as no_of_login_days_required,
count(distinct date(login_timestamp)) as no_of_login_days
from logins 
group by user_id
having abs(datediff('2024-06-28',date(min(login_timestamp)))+1) = count(distinct date(login_timestamp))
order by user_id , date(min(login_timestamp));

-- Q7. On what dates there are no login at all , return login date ?

